#pragma checksum "C:\Users\Imran Khan\source\repos\MedicoCopy\Medico\Views\Diagnosis\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2f3303d5c47640f44cff75fa5680e679a4f17839"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Diagnosis_Index), @"mvc.1.0.view", @"/Views/Diagnosis/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Imran Khan\source\repos\MedicoCopy\Medico\Views\_ViewImports.cshtml"
using Medico;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Imran Khan\source\repos\MedicoCopy\Medico\Views\_ViewImports.cshtml"
using Medico.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2f3303d5c47640f44cff75fa5680e679a4f17839", @"/Views/Diagnosis/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2c49fea8670ff10236ab95a5d37cf3d944379fdf", @"/Views/_ViewImports.cshtml")]
    public class Views_Diagnosis_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Medico.ViewModel.DiagnosisViewModel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"
<div id=""main""></div>

<input type=""button"" onclick=""next()"" value=""Next"" />
<link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/chosen/1.8.7/chosen.css"" integrity=""sha512-0nkKORjFgcyxv3HbE4rzFUlENUMNqic/EzDIeYCgsKa/nwqr2B91Vu/tNAu4Q0cBuG4Xe/D1f/freEci/7GDRA=="" crossorigin=""anonymous"" />
<script src=""https://cdnjs.cloudflare.com/ajax/libs/chosen/1.8.7/chosen.jquery.min.js"" integrity=""sha512-rMGGF4wg1R73ehtnxXBt5mbUfN9JUJwbk21KMlnLZDJh7BkPmeovBuddZCENJddHYYMkCh9hPFnPmS9sspki8g=="" crossorigin=""anonymous""></script>

<script>
    var gender;
    var age = 0;
    var questions = [];
    var answers = [];
    var symptoms = [];
    $(document).ready(function () {
        //load get gender
        Ajax({ url: ""/diagnosis/getgender"" })
            .then(x => {
                document.getElementById(""main"").innerHTML = x;
                step = 0;
            })
    });
    var step = 0;//0 step indicates user is on gender stage
    function next() {
        switch (step) {
  ");
            WriteLiteral(@"          case 0: getAge(); break;
            case 1: getSymptoms(); break;
            case 2: getNextQuestion(); break;
            case 3: askQuestions();break;
            default:
        }
    }

    function getAge() {
        gender = $(""input[name=gender]:checked"").val();
        if (!gender) return;
        Ajax({ url: ""/diagnosis/getage"" })
            .then(x => {
                document.getElementById(""main"").innerHTML = x;
                step = 1;
            })
    }
    function getSymptoms() {
        age = $(""#ageCount"").text();
        if (!age) return;
        Ajax({ url: ""/diagnosis/getSymptoms"" })
            .then(x => {
                document.getElementById(""main"").innerHTML = x;

                step = 2;
                $(""#symptoms"").chosen({ no_results_text: ""Oops, nothing found!"" });
            })
    }

    function getNextQuestion() {
        var symptoms = $(""#symptoms"").val();
        Ajax({ url: ""/diagnosis/getQuestions"", data: { SymptomsL");
            WriteLiteral(@"ist: symptoms } })
            .then(x => {
                console.log(x);
                questions = x;
                step = 3;
                if (x.length>0)document.getElementById(""main"").innerHTML = `
                    <label>${questions[0].question}</label>
                    <br />
                    <input type=""radio"" value=""1"" name=""answer"" />
                    <label>Yes</label>
                    <br />
                    <input type=""radio"" value=""0"" name=""answer"" />
                    <label>No</label>`
            })
    }

    function askQuestions() {
        if (questions.length > 0) {
            let answer = $(""input[name=answer]:checked"").val();
            if (!answer) return;
            answers.push(answer);
            let questionNumber = answers.length;
            if (questions[questionNumber]) {
                document.getElementById(""main"").innerHTML = `
                    <label>${questions[questionNumber].question}</label>
               ");
            WriteLiteral(@"     <br />
                    <input type=""radio"" value=""1"" name=""answer"" />
                    <label>Yes</label>
                    <br />
                    <input type=""radio"" value=""0"" name=""answer"" />
                    <label>No</label>`
            }
            else {
                //list ended
                document.getElementById(""main"").innerHTML = ""<p>Loading Results...</p>""
                Ajax({ url: ""/diagnosis/GetResults"", data: {questions, answers} })
                    .then(x => {
                        //document.getElementById(""main"").innerHTML = x;
                        var result = count(x);
                        result.sort((a, b) => a.count > b.count ? 1 : -1);
                        //dispaly
                        var html = ""<h5>Result</h5><ul>""
                        result.forEach(x => {
                            html += `<li>${x.name}</li>`
                        })
                        html += ""</ul>"";


                        d");
            WriteLiteral(@"ocument.getElementById(""main"").innerHTML = html;
                    })
            }
        }
    }
    //function find_duplicate_in_array(array) {
    //    const count = {}
    //    const result = []

    //    array.forEach(item => {
    //        if (count[item]) {
    //            count[item] += 1
    //            return
    //        }
    //        count[item] = 1
    //    })

    //    for (let prop in count) {
    //        if (count[prop] >= 2) {
    //            result.push(prop)
    //        }
    //    }

    //    console.log(count)
    //    return result;

    //}


    function count(array_elements) {

        var result__ = [];
        array_elements.sort();

        var current = null;
        var cnt = 0;
        for (var i = 0; i < array_elements.length; i++) {
            if (array_elements[i] != current) {
                if (cnt > 0) {
                    result__.push({ name: current, count: cnt })
                }
                current = array_elements[i];
           ");
            WriteLiteral(@"     cnt = 1;
            } else {
                cnt++;
            }
        }
        if (cnt > 0) {
            result__.push({ name: current, count: cnt })
        }
        return result__;
    }
    

    function Ajax({ url, data }) {
        return new Promise((resolve, reject) => {
            $.ajax({
                url,
                data,
                type: ""POST"",
                content: ""Application/json"",
                success: function (data) { resolve(data) },
                error: function (request) { reject(request) }
            })
        })
    }
    function updateAge() {
        // document.getElementById(""ageCount"").innerText = document.getElementById(""age-range"").value;
        var slider = document.getElementById(""age-range"");
        var output = document.getElementById(""ageCount"");
        output.innerHTML = slider.value; // Display the default slider value

        // Update the current slider value (each time you drag the slider handle)
        s");
            WriteLiteral("lider.oninput = function () {\r\n            output.innerHTML = this.value;\r\n        }\r\n    }\r\n</script>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Medico.ViewModel.DiagnosisViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
